"use strict";
// Copyright 2024 J.W. Lagendijk. All rights reserved. MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pastebin = void 0;
const tslib_1 = require("tslib");
const Pastebin_js_1 = require("../lib/Pastebin.js");
const promises_1 = tslib_1.__importDefault(require("fs/promises"));
const buffer_1 = require("buffer");
const node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
const fast_xml_parser_1 = require("fast-xml-parser");
const parser = new fast_xml_parser_1.XMLParser();
class Pastebin extends Pastebin_js_1.AbstractPastebin {
    constructor(config) {
        super(config, {
            fetch: node_fetch_1.default,
            parseXML: (xml) => {
                const data = parser.parse(xml);
                return data;
            },
        });
    }
    async createPasteFromFile(options = { file: "" }) {
        if (options.file === "") {
            return Promise.reject(new Error("File needed!"));
        }
        let data;
        try {
            if (buffer_1.Buffer.isBuffer(options.file)) {
                data = options.file.toString("utf-8");
            }
            else {
                data = await promises_1.default.readFile(options.file, "utf-8");
            }
        }
        catch (error) {
            return Promise.reject(new Error(`Error reading file! ${error}`));
        }
        if (data.length === 0) {
            return Promise.reject(new Error("Empty file!"));
        }
        const pasteOpts = options;
        delete pasteOpts.file;
        pasteOpts.text = data;
        return this.createPaste(pasteOpts);
    }
}
exports.Pastebin = Pastebin;
